---
import Heading from "@/components/Articles/Heading.astro";
import Keyword from "@/components/Articles/Keyword.astro";
import GetCommand from "./GetCommand.astro";
import Commands from "./Commands.astro";
import OKTable from "./OKTable.astro";
import SETTable from "./SETTable.astro";
import SerializingOK from "./SerializingOK.astro";
import OKSerialized from "./OKSerialized.astro";
import SerializeExampleSet from "./SerializeExampleSet.astro";
import SerializedExampleSet from "./SerializedExampleSet.astro";
---

<Heading id="how-resp-work"> How does RESP Work? </Heading>

<p>
  Redis works with commands like <strong>GET, SET, INCR, EXISTS.</strong> Each of
  these has its own structure, technically known as <strong>grammar.</strong>
</p>
<p>Let's see some examples of this grammar:</p>

<GetCommand />

<p>
  As you can see, the GET command is pretty simple, just the prefix <Keyword
    word="GET"
  />
  followed by a <Keyword word="key" /> argument.
</p>

<p>
  As Redis is a <strong>key-value</strong> database, when we use the <strong
    >GET</strong
  > command it returns the <strong>value associated</strong> with that key or <Keyword
    word="nil"
  />
  (nil means the key doesn't hold any value).
</p>

<p>Let's see some similar commands:</p>

<Commands />

<p>
  These are some of the Redis commands we are going to support.
  <br />
  You will be amazed by how easily we can extend the available commands with the
  help of a
  <strong>Parser</strong>, but we'll get to that later.
</p>

<p>
  Now that we know some commands and their grammar, it's time to <strong
    >serialize a command!</strong
  >
</p>

<SerializingOK />

<p>
  Don't let yourself be intimidated by the Serialization of <Keyword
    word="OK"
  />
  in fact it is pretty simple.
</p>

<OKTable />

<p>If you put it all together the result is:</p>
<OKSerialized />

<p>Let's see one more example to understand this concept.</p>

<SerializeExampleSet />

<SETTable />

<p>It might seem a long process but we finally had come to a result.</p>

<SerializedExampleSet />

<p>
  If you are still confused about how RESP works, I <strong>highly</strong> recommend
  you to consult this Redis article about RESP. You can <a
    target="_blank"
    rel="noopener noreferrer"
    href="https://redis.io/docs/latest/develop/reference/protocol-spec/"
    >find it here</a
  >! ðŸš€
</p>

<p>
  If you're wondering why we're doing all of this, remember that computers
  communicate with each other in a <strong>shared language</strong>.
  <br />
  This language had to be efficient and as expressive as possible, as this is crucial
  to optimize the Redis <strong>Parser</strong>.
</p>

<p>But wait, what is a <strong>Parser</strong>?</p>
