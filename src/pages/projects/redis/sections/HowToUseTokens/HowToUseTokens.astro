---
import Heading from "@/components/Articles/Heading.astro";
import Keyword from "@/components/Articles/Keyword.astro";
import LexerNext from "./LexerNext.astro";
import LexerDefinition from "./LexerDefinition.astro";
import LexerInitialization from "./LexerInitialization.astro";
---

<Heading id="how-to-use-tokens">
  How to use our Tokens: Building a Lexer
</Heading>

<p>
  To transform raw input (like <Keyword word="SET userName Alejandro" />) into
  tokens, we need a <strong>Lexer</strong> (also called a <strong
    >Scanner</strong
  >). This component scans the input text and converts it into a structured
  stream of tokens for parsing.
  <br />
  <strong>Key Lexer Mechanics:</strong> For Tokens like <Keyword
    word="userName"
  /> we need to track:
</p>

<ol>
  <li><Keyword word="pos" />: Start position of the current Token.</li>
  <li>
    <Keyword word="readPos" />: End position of the current Token. (used for
    slicing).
  </li>
  <li>
    <Keyword word="ch" />: The current character being analyzed.
  </li>
</ol>

<p>
  These fields enable precise <strong>substring extraction</strong> (e.g., slicing
  <Keyword word="input[pos:readPos]" /> to isolate <Keyword word="userName" />).
</p>

<LexerDefinition />

<p>
  Now that we have defined our <strong>Lexer</strong>, we have to create it a
  constructor to make it a relaiable API.
</p>

<LexerInitialization />
<p>
  The <Keyword word="New()" /> constructor initializes the <Keyword
    word="lexer"
  /> by calling <Keyword word="next()" />, which handles character-by-character
  advancement through the input string. Hereâ€™s how it works:
</p>

<LexerNext />

<p>As you can see the <Keyword word="next()" /> method handles two cases:</p>

<ol>
  <li>
    If the <Keyword word="readPos" /> has <strong>exceeded</strong> the input's length
    it sets
    <Keyword word="ch" /> to the <Keyword word="token.EOF" /> (End Of File) TokenKind
    that indicates that the input string has been consumed.
  </li>
  <li>
    If the <Keyword word="readPos" /> has <strong>not exceeded</strong> the input's
    length it sets <Keyword word="ch" /> to the character at the position
    <Keyword word="readPos" /> (making it the new current character) and then advances
    both <Keyword word="pos" /> and <Keyword word="readPos" />.
  </li>
</ol>
